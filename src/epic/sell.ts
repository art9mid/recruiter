import { CallbackQuery } from 'node-telegram-bot-api';
import bot from '../create';
import welcome from './welcome';
import BaseCommands, { BaseFeatures } from '../commands/base';

interface Values {
  lvl?: string | null,
  trophies?: string | null,
  brawlers?: string | null,
  legendary?: string | null,
  gems?: string | null,
  gold?: string | null,
  price?: string | null
}

async function sell(message: CallbackQuery) {
  const chatId = message.message.chat.id;
  let values: Values = {};

  let isActive: boolean = false;

  const options = {
    parse_mode: 'HTML',
    reply_markup: {
      force_reply: true,
      inline_keyboard: [[
        { text: '–ù–∞—á–∞—Ç—å', callback_data: BaseFeatures.startSell },
        { text: '–û—Ç–º–µ–Ω–∏—Ç—å', callback_data: BaseFeatures.stopSell },
      ]],
    },
  };

  const text = (options: Values) => {
    return `
üÜò <b>–î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–¥–∞–∂–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è ‚ÄºÔ∏è</b>\n
‚òùÔ∏è –£—Ä–æ–≤–µ–Ω—å: ${options?.lvl || '-'}\b
üèÜ –¢—Ä–æ—Ñ–µ–∏: ${options?.trophies || '-'}\b
‚ù§Ô∏è –ë—Ä–∞–≤–ª–µ—Å—ã: ${options?.brawlers || '-'}\b
üê≤ –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ: ${options?.legendary || '-'}\b
üíé –ì–µ–º—ã: ${options?.gems || '-'}\b
‚öúÔ∏è –ó–æ–ª–æ—Ç–æ: ${options?.gold || '-'}\n
<b>–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏:</b> ${options?.price || '-'}`;
  };

  const resultText = (options: Values) => {
    return `
‚òùÔ∏è –£—Ä–æ–≤–µ–Ω—å: ${options?.lvl || '-'}\b
üèÜ –¢—Ä–æ—Ñ–µ–∏: ${options?.trophies || '-'}\b
‚ù§Ô∏è –ë—Ä–∞–≤–ª–µ—Å—ã: ${options?.brawlers || '-'}\b
üê≤ –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ: ${options?.legendary || '-'}\b
üíé –ì–µ–º—ã: ${options?.gems || '-'}\b
‚öúÔ∏è –ó–æ–ª–æ—Ç–æ: ${options?.gold || '-'}\n
<b>–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏:</b> ${options?.price || '-'}`;
  };

  // @ts-ignore
  const setupMessage = await bot.sendMessage(chatId, text(), options);

  const editMessage = (key?: keyof Values, value?: string) => {
    bot.editMessageText(value ? text({ ...values, [value]: value }) : setupMessage.text, {
      parse_mode: 'HTML',
      chat_id: chatId,
      message_id: setupMessage.message_id,
    });
  };

  let replyOptions = {
    reply_markup: {
      resize_keyboard: true,
      keyboard: [['‚ùå']],
    },
  };

  const startForm = async (message: CallbackQuery) => {
    isActive = true;
    if (message.data === BaseFeatures.startSell) {
      await editMessage();
      await setup();
    }
  };

  const stopForm = async () => {
    values = {};
    isActive = false;
    await bot.removeTextListener(BaseCommands.cancelSell);
    await bot.sendMessage(chatId, `–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–∏–Ω–æ`, {
      reply_markup: { hide_keyboard: true },
    });
    await welcome(message);
  };

  bot.onText(BaseCommands.cancelSell, stopForm);
  bot.once('callback_query', startForm);

  const setup = async () => {
    await bot.sendMessage(chatId, `–í–∞—à —É—Ä–æ–≤–µ–Ω—å`, replyOptions);
    if (isActive) {
      bot.once('message', async (message) => {
        values.lvl = message.text;
        isActive && await editMessage('lvl', message.text);
        isActive && await bot.sendMessage(chatId, `–í–∞—à–∏ —Ç—Ä–æ—Ñ–µ–∏`);
        isActive && await bot.once('message', async (message) => {
          values.trophies = message.text;
          isActive && await editMessage('trophies', message.text);
          isActive && await bot.sendMessage(chatId, `–í–∞—à–∏ –±—Ä–∞–≤–ª–µ—Å—ã`);
          isActive && await bot.once('message', async (message) => {
            values.brawlers = message.text;
            isActive && await editMessage('brawlers', message.text);
            isActive && await bot.sendMessage(chatId, `–í–∞—à–∏ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ`);
            isActive && await bot.once('message', async (message) => {
              values.legendary = message.text;
              isActive && await editMessage('legendary', message.text);
              isActive && await bot.sendMessage(chatId, `–í–∞—à–∏ –≥–µ–º—ã`);
              isActive && await bot.once('message', async (message) => {
                values.gems = message.text;
                isActive && await editMessage('gems', message.text);
                isActive && await bot.sendMessage(chatId, `–í–∞—à–µ –∑–æ–ª–æ—Ç–æ`);
                isActive && await bot.once('message', async (message) => {
                  values.gold = message.text;
                  isActive && await editMessage('gold', message.text);
                  isActive && await bot.sendMessage(chatId, `–ó–∞ —Å–∫–æ–ª—å–∫–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç ?`);
                  isActive && await bot.once('message', async (message) => {
                    values.price = message.text;
                    isActive && await editMessage('price', message.text);
                    isActive && await bot.sendMessage(chatId, `–û—Ç–ª–∏—á–Ω–æ, –≤—ã —Å–æ–∑–¥–∞–ª–∏ –æ–±—å—è–≤–ª–µ–Ω–∏–µ, –æ–Ω–æ –≤—ã–≥–ª—è–¥–∏—Ç –≤–æ—Ç —Ç–∞–∫:\n${resultText(values)}`, {
                      parse_mode: 'HTML',
                      reply_markup: {
                        hide_keyboard: true,
                      },
                    });
                  });
                });
              });
            });
          });
        });
      });
    }
  };
}

export default sell;